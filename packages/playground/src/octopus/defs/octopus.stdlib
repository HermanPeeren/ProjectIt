library stdlib for language octopus

limited StdLibPrimitiveType implements IPrimitiveType {
/* StdLibPrimitiveType has the following properties:
    name: string;
    pathName: PathName;
    visibility: VisibilityKind;
    attributes: Attribute[];
    operations: IOperation[];
    navigations: AssociationEnd[];
    reference generalizations: IClassifier[];
    reference subClasses: IClassifier[];
    reference interfaces: UmlInterface[];
    states: State[];
    classAttributes: Attribute[];
    classOperations: IOperation[];
    isCollectionKind: boolean;
    reference owner: UmlPackage;
    isAbstract: boolean;
    stereotype: string;
*/
    OCL_Real = {
        name: "Real",
        operations: [
            MIN = {
                name: "min",
                parameters: [
                {   name: "object1", type: OCL_Real },
                {   name: "object2", type: OCL_Real }
                ],
                returnType: OCL_Real
            },
            MAX = {
                name: "max",
                parameters: [
                {   name: "object1", type: OCL_Real },
                {   name: "object2", type: OCL_Real }
                ],
                returnType: OCL_Real
            },
            ToSTRING = {
                name: "toString",
                parameters: [ { name: "object", type: OCL_Real } ],
                returnType: OCL_String
            } ],
        subclasses: [ OCL_Integer ]
    }
    OCL_Integer = {
        name: "Integer",
        operations: [
            MIN = {
                name: "min",
                parameters: [
                {   name: "object1", type: OCL_Integer },
                {   name: "object2", type: OCL_Integer }
                ],
                returnType: OCL_Integer
            },
            MAX = {
                name: "max",
                parameters: [
                {   name: "object1", type: OCL_Integer },
                {   name: "object2", type: OCL_Integer }
                ],
                returnType: OCL_Integer
            },
            ToSTRING = {
                name: "toString",
                parameters: [ { name: "object", type: OCL_Integer } ],
                returnType: OCL_String
            }
            DIV = {
                name: "div",
                parameters: [
                {   name: "object1", type: OCL_Integer },
                {   name: "object2", type: OCL_Integer }
                ],
                returnType: OCL_Integer
            }
            MOD = {
                name: "mod",
                parameters: [
                {   name: "object1", type: OCL_Integer },
                {   name: "object2", type: OCL_Integer }
                ],
                returnType: OCL_Integer
            }
        ],
        generalizations: [ OCL_Real ]    
    }
    OCL_String = {
        name: "String",
        operations: [
        // TODO deze operations uitschrijven
        SIZE, CONCAT, ToUPPER, ToLOWER, SUBSTRING, ToINTEGER, ToREAL
        ]
    }
    OCL_Boolean = {
        name: "Boolean",
        operations: [
        ]
    }
}

StdLibDataType {
    OCL_Any = {
        name: "Any",
        operations: [
            ToSTRING = {
                name: "toString",
                parameters: [ { name: "object", type: OCL_Any } ],
                returnType: OCL_String
            },
            OCL_ISNEW = {
                name: "oclIsNew",
                returnType: OCL_Boolean
            }
        ]
    }
    // TODO de rest uitschrijven
    OCL_Void = {
        name: "OclVoid"
        operations: [ OCL_UNDEFINED ]
    }
    OCL_Type = {
        name: "OclType"
    }
    OCL_State = {
        name: "OclState"
    }
    OCL_Message = {
        name: "OclMessage"
    }
    OCL_ModelElement = {
        name: "OclModelElement"
    }
    DependsOnArgumentType = {
        name: "DependsOnArgumentType"
    }
    DependsOnSourceType = {
        name: "DependsOnSourceType"
    }
}

StdLibOperation {
/* Other math ops
    SUM = {
        name : "sum",
        parameters: [parts: OCL_REAL[] ]
    }
    INTEGRAAL = {
        name : "integraal",
        parameters: [function: FUNCTION[], interval_lower_bound: OCL_Integer, interval_upper_bound: OCL_Integer ]
    }
    MACHTSVERHEFFING = {
        name : "totDeMacht",
        parameters: [value: OCL_Real, macht: OCL_Integer]
        returnType: OCL_Real
    }
    WORTEL = {
        name : "wortel",
        parameters: [value: OCL_Real, macht: OCL_Integer]
        returnType: OCL_Real
    }
    // SIN, TAN, COS, etc can also be 'normal' functions, likewise LOG, LN, n!
    // how to treat constants like pi? - no problem, I think
*/
    OCL_ISUNDEFINED = {
        name: "oclIsUndefined",
        returnType: OCL_Boolean
    }
    OCL_INSTATE = {
        name: "oclInState",
        parameters: [{ name: "object", type: OCL_State }],
        returnType: OCL_Boolean
    }
    OCL_ISKINDOF = {
        name: "oclIsKindOf",
        parameters: [{ name: "object", type: OCL_Type }],
        returnType: OCL_Boolean
    }
    OCL_ISTYPEOF = {
        name: "oclIsTypeOf",
        parameters: [{ name: "object", type: OCL_Type }],
        returnType: OCL_Boolean
    }
    OCL_INSTATE = {
        name: "oclInState",
        parameters: [{ name: "object", type: OCL_State }],
        returnType: OCL_Boolean
    }
    OCL_ASTYPE = {
        name: "oclAsType",
        parameters: [{ name: "object", type: OCL_Type }],
        returnType: DependsOnSourceType
    }
    OCL_ASSET = {
        name: "asSet",
        returnType: DependsOnSourceType
    }
    OCL_ALLINSTANCES = {
        name: "allInstances",
        returnType: DependsOnSourceType
    }
    OCL_UNDEFINED = {
        name: "oclIsUndefined",
        returnType: OCL_Boolean
    }
}
