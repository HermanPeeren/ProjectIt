editor YYY for language octopus

OclPart {
    @projection normal
        [package ${self.umlPackage}
        ${self.contexts @vertical @terminator [\n]}
        endpackage ]
}

OclContext {
    @projection normal
    [context ${self.referredElement}
    [?inv: ${self.invariants @horizontal @separator[\ninv:]}]
    [?def: ${self.definitions @horizontal @separator[\ndef:]}]
    [?body: ${self.bodyExpression}]
    [?pre: ${self.preConditions @horizontal @separator[\npre:]}]
    [?post: ${self.postConditions @horizontal @separator[\npost:]}]
    [?init: ${self.initExpression}]
    [?derive: ${self.deriveExpression}]
    ]
}

AssociationClassCallExp {
    @projection normal
        [${self.referredAssociationClass}]
}
/**
 * AssociationEndCallExp : a representation of a reference to an association end.
 */
AssociationEndCallExp {
    @projection normal
        [${self.referredAssociationEnd}]
}
/**
 * AttributeCallExp : a representation of a reference to an attribute.
 */
AttributeCallExp {
    @projection normal
        [${self.referredAttribute}]
}
/**
 * BooleanLiteralExp : an expression that is a literal boolean value, like 'true'.
 */
BooleanLiteralExp {
    @projection normal
        [${self.symbol}]
}
/**
 * CollectionItem : an element in a literal collection expression, like
 * '4' in 'Set{4,10,5}', or 'a.b' in 'Bag{ a.b }'.
 */
CollectionItem {
    @projection normal
        [${self.item}]
}
/**
 * CollectionLiteralExp : a representation of a literal collection expression,
 * like 'Set{2,4,7}'
 */
CollectionLiteralExp {
    @projection normal
    [ ${self.collectionType} { ${self.parts @horizontal @separator[, ]} }]
}
/**
 * CollectionLiteralPart : an element in a literal collection expression, like
 * '4' in 'Set{4,10,5}', or '10..24' in 'Bag{ 10..24 }'.
 */
CollectionLiteralPart {
}
/**
 * CollectionRange : a range that represents a number of elements in a literal
 * collection expression, like '2..5' in 'Bag{ 2..5 }'.
 */
CollectionRange {
    @projection normal
    [${self.first}..${self.last}]
}
/**
 * EnumLiteralExp : a representation of a value of an enumeration type, like
 * 'gold'.
 */
EnumLiteralExp {
    @projection normal
    [${self.referredEnumLiteral}]
}
/**
 * IfExp : a representation of an if expression.
 */
IfExp {
    @projection normal
    [if ${self.condition} then ${self.thenExpression} [?else ${self.elseExpression}] endif]
//    [if ${self.condition} then ${self.thenExpression} else ${self.elseExpression} endif]
}
/**
 * IntegerLiteralExp : an expression that is a literal integer value, like '100'.
 */
IntegerLiteralExp {
    @projection normal
    [${self.symbol}]
}
/**
 * IterateExp : a representation of the generic loop operation called 'iterate'.
 */
IterateExp {
    @projection normal
    [->iterate ( [?${self.iterators @horizontal @separator[; ]} | ] ${self.body} ) ]
//    [->iterate ( ${self.iterators @horizontal @separator[; ]} | ${self.body} ) ]
}
/**
 * IteratorExp : a representation of one of the loop expressions in the standard
 * library, e.g. 'forAll', 'exists'.
 */
IteratorExp {
    @projection normal
    [->${self.referredIterator} ( [?${self.iterators @horizontal @separator[; ]} | ] ${self.body} ) ]
//    [->${self.referredIterator} ( ${self.iterators @horizontal @separator[; ]} | ${self.body} ) ]
}
/**
 * LetExp : a representation of an expression that holds a local variable
 */
LetExp {
    @projection normal
    [${self.variable} in ${self.inExp}]
}
/**
 * LiteralExp : a representation of an expression
 * with no argumnets that produces a value.
 */
//abstract LiteralExp {
//}
/**
 * LoopExp : a representation of an expression that loops over a collection.
 * All elements of the collection are visited and the body is executed for
 * each of them in turn.
 */
//LoopExp {
//}
/**
 * ModelPropertyCallExp : an expression that refers to a property of a Classifier.
 */
//ModelPropertyCallExp {
//}
/**
 * NavigationCallExp : a representation of an expression that either references
 * an association end or an association class.
 */
NavigationCallExp {
    @projection normal
    [${self.navigationSource}]
}
/**
 * NumericLiteralExp : an expression that is a literal numeric value, like '100' or '2.3'.
 */
//NumericLiteralExp {
//}
/**
 * OclExpression : a representation of an written in OCL that must be evaluated
 * in a certain environment (its context). Evaluation always results in a value, for instance
 * a simpel string or integer value, or an object, or datatype instance.
 */
OclExpression {
}
/** IOclMessageExp : an expression that reflects a message that was sent
 *  The ^ or ^^ in the OCL spec.
 */
//OclMessageExp {
//    @projection normal
//    [${self.target}^^${self.referredOperation}(${self.arguments @horizontal @separator[, ]})]
//}
/**
 * OclStateLiteralExp : a representation of an expression that refers to a
 * state of a Classifier.
 * <p>
 * Note that this metaclass is not present in the OCL 2.0 specification.
 */
OclStateLiteralExp {
    @projection normal
    [${self.referredState}]
}
/**
 * OclTypeLiteralExp : a representation of an expression that refers to a
 * Classifier itself, i.e used as type in for instance the 'oclAsType' operation.
 * <p>
 * Note that this metaclass is not present in the OCL 2.0 specification.
 */
OclTypeLiteralExp {
    @projection normal
    [${self.referredClassifier}]
}
/**
 * OclUndefinedLiteralExp : an expression that is a literal OCL undefined value, the only value is 'oclUndefined'.
 */
 OclUndefinedLiteralExp {
    @projection normal
    [${self.symbol}]
 }
/**
 * OperationCallExp : a representation of an expression that refers to an operation on
 * a Classifier.
 */
OperationCallExp {
    @projection normal
    [${self.referredOperation} ( ${self.arguments @horizontal @separator [, ]} )]
}
/**
 * PrimitiveLiteralExp : an expression that denotes a value of a primitive type
 */
//PrimitiveLiteralExp {
//}
/**
 * PropertyCallExp : an expression that refers to a property of a type.
 * A property can be an operation, attribute, association end, predefined
 * iterator, etc.
 */
PropertyCallExp {
    @projection normal
    [${self.isMarkedpre @keyword [pre]} ${self.source}]
}
/**
 * RealLiteralExp : an expression that is a literal integer value, like '1.23'.
 */
RealLiteralExp {
    @projection normal
    [${self.symbol}]
}
/**
 * StringLiteralExp : an expression that is a literal string value, like 'aString'.
 */
StringLiteralExp {
    @projection normal
    [${self.symbol}]
}
/**
 * TupleLiteralExp : an expression that denotes a tuple value.
 */
TupelLiteralExp {
    @projection normal
    [Tuple { ${self.tupleParts @horizontal @separator [, ]} }]
}
/**
 * OclUndefinedLiteralExp : an expression that is a literal OCL undefined value, the only value is 'oclUndefined'.
 */
//UnspecifiedValueExp {
//}
/**
 * VariableDeclaration : an expression that defines a variable and binds
 * it to a type. Optionally it can hold an initial value for the variable.
 */
VariableDeclaration {
// name: string; inherited from IModelElement
    @projection normal
    [${self.name} [?: ${self.type}] [? = ${self.initExpression}]]
//    [${self.name} : ${self.type} = ${self.initExpression}]
//    isIteratorVar: boolean;
}
/**
 * VariableExp : an expression that is a  reference to a variable.
 */
VariableExp {
    @projection normal
    [${self.referredVariable}]
}

