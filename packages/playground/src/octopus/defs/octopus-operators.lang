language octopus // all (infix) binary operators

// OCL_Integer inherits from OCL_Real !!

unary operator UnaryMinus {
    symbol = "-",
    priority = 12,
    typeof = {
        value: OCL_Real,     result: OCL_Real
        value: OCL_Integer,  result: OCL_Integer
    }
}
unary operator Abs {
    symbol = "abs",
    priority = 12,
    typeof = {
        value: OCL_Real,     result: OCL_Real
        value: OCL_Integer,  result: OCL_Integer
    }
}
unary operator Floor {
    symbol = "floor",
    priority = 12,
    typeof = {
        value: OCL_Real,     result: OCL_Integer
    }
}
unary operator Round {
    symbol = "round",
    priority = 12,
    typeof = {
        value: OCL_Real,     result: OCL_Integer
    }
}
unary operator Not {
    symbol = "not",
    priority = 12,
    typeof = {
        value: OCL_Boolean,     result: OCL_Boolean
    }
}
unary operator Percent {
    symbol = "%",
    priority = 12,
    typeof = {
        value: OCL_Real,     result: OCL_Real
    }
}
binary operator Equals {
    symbol = "=",
    priority = 8,
    typeof = {
//        left: OCL_Real,         right: OCL_Real,            result: OCL_Boolean
//        left: OCL_Integer,      right: OCL_Integer,         result: OCL_Boolean
        left: OCL_Any,          right: OCL_Any,             result: OCL_Boolean
//        left: OCL_String,       right: OCL_String,          result: OCL_Boolean
//        left: OCL_Boolean,      right: OCL_Boolean,         result: OCL_Boolean
//        left: OCL_Type,         right: OCL_Type,            result: OCL_Boolean
//        left: OCL_State,        right: OCL_State,           result: OCL_Boolean
//        left: OCL_ModelElement, right: OCL_ModelElement,    result: OCL_Boolean
    }
}
binary operator NotEquals {
    symbol = "<>",
    priority = 8,
    typeof = {
//        left: OCL_Real,         right: OCL_Real,            result: OCL_Boolean
        left: OCL_Any,          right: OCL_Any,             result: OCL_Boolean
//        left: OCL_Boolean,      right: OCL_Boolean,         result: OCL_Boolean
//        left: OCL_Type,         right: OCL_Type,            result: OCL_Boolean
//        left: OCL_State,        right: OCL_State,           result: OCL_Boolean
//        left: OCL_ModelElement, right: OCL_ModelElement,    result: OCL_Boolean
//        left: OCL_String,       right: OCL_String,          result: OCL_Boolean
    }
}
binary operator SmallerThan {
    symbol = "<",
    priority = 6,
    typeof = {
        left: OCL_Real,     right: OCL_Real,     result: OCL_Boolean
        left: OCL_Integer,  right: OCL_Integer,  result: OCL_Boolean
        left: OCL_Integer,  right: OCL_Real,     result: OCL_Boolean
        left: OCL_Real,     right: OCL_Integer,  result: OCL_Boolean
    }
}
binary operator LargerThan {
    symbol = ">",
    priority = 6,
    typeof = {
        left: OCL_Real,     right: OCL_Real,     result: OCL_Boolean
        left: OCL_Integer,  right: OCL_Integer,  result: OCL_Boolean
        left: OCL_Integer,  right: OCL_Real,     result: OCL_Boolean
        left: OCL_Real,     right: OCL_Integer,  result: OCL_Boolean
    }
}
binary operator SmallerOrEqualThan {
    symbol = "<=",
    priority = 6,
    typeof = {
        left: OCL_Real,     right: OCL_Real,     result: OCL_Boolean
        left: OCL_Integer,  right: OCL_Integer,  result: OCL_Boolean
        left: OCL_Integer,  right: OCL_Real,     result: OCL_Boolean
        left: OCL_Real,     right: OCL_Integer,  result: OCL_Boolean
    }
}
binary operator LargerOrEqualThan {
    symbol = ">=",
    priority = 6,
    typeof = {
        left: OCL_Real,     right: OCL_Real,     result: OCL_Boolean
        left: OCL_Integer,  right: OCL_Integer,  result: OCL_Boolean
        left: OCL_Integer,  right: OCL_Real,     result: OCL_Boolean
        left: OCL_Real,     right: OCL_Integer,  result: OCL_Boolean
    }
}
binary operator Plus {
    symbol = "+",
    priority = 4,
    typeof = {
        left: OCL_Real,     right: OCL_Real,     result: OCL_Real
        left: OCL_Integer,  right: OCL_Integer,  result: OCL_Integer
        left: OCL_Integer,  right: OCL_Real,     result: OCL_Real
        left: OCL_Real,     right: OCL_Integer,  result: OCL_Real
        left: OCL_String,   right: OCL_String,   result: OCL_String
    }
}
binary operator Minus {
    symbol = "-",
    priority = 4,
    typeof = {
        left: OCL_Real,     right: OCL_Real,     result: OCL_Real
        left: OCL_Integer,  right: OCL_Integer,  result: OCL_Integer
        left: OCL_Integer,  right: OCL_Real,     result: OCL_Real
        left: OCL_Real,     right: OCL_Integer,  result: OCL_Real
//        left: OCL_String,   right: OCL_String,   result: OCL_String
    }
}
binary operator Multiply {
    symbol = "*",
    priority = 2,
    typeof = {
        left: OCL_Real,     right: OCL_Real,     result: OCL_Real
        left: OCL_Integer,  right: OCL_Integer,  result: OCL_Integer
        left: OCL_Integer,  right: OCL_Real,     result: OCL_Real
        left: OCL_Real,     right: OCL_Integer,  result: OCL_Real
    }
}  
binary operator Divide {
    symbol = "/",
    priority = 2,
    typeof = {
        left: OCL_Real,     right: OCL_Real,     result: OCL_Real
        left: OCL_Integer,  right: OCL_Integer,  result: OCL_Integer
        left: OCL_Integer,  right: OCL_Real,     result: OCL_Real
        left: OCL_Real,     right: OCL_Integer,  result: OCL_Real
    }
}
binary operator Or {
    symbol = "or",
    priority = 7,
    typeof = {
        left: OCL_Boolean,  right: OCL_Boolean,  result: OCL_Boolean
    }
}
binary operator Xor {
    symbol = "xor",
    priority = 7,
    typeof = {
        left: OCL_Boolean,  right: OCL_Boolean,  result: OCL_Boolean
    }
}
binary operator And {
    symbol = "and",
    priority = 7,
    typeof = {
        left: OCL_Boolean,  right: OCL_Boolean,  result: OCL_Boolean
    }
}
binary operator Implies {
    symbol = "implies",
    priority = 7,
    typeof = {
        left: OCL_Boolean,  right: OCL_Boolean,  result: OCL_Boolean
    }
}
